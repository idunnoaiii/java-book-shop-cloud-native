plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.8'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.bookshop'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

jib {
    to {
        image = 'idunno62515/catalog-service:latest'
    }
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.2")
	set('testcontainersVersion', "1.17.3")
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	// implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.testcontainers:postgresql'

	runtimeOnly 'org.postgresql:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]

	// $ ./gradlew bootBuildImage --imageName ghcr.io/idunnoaiii/catalog-service --publishImage -PregistryUrl=ghcr.io -PregistryUsername=idunnoaiii -PregistryToken={{token}}
	// docker {
	// 	publishRegistry {
	// 		username = project.findProperty('registryUsername')
	// 		password = project.findProperty('registryToken')
	// 		url = project.findProperty('registryUrl')
	// 	}
	// }
}

tasks.named('test') {
	useJUnitPlatform()
}

// bootRun {
// 	systemProperty 'spring.profiles.active', 'testdata'
// }
